import org.apache.tools.ant.filters.FixCrLfFilter

import java.nio.file.Files
import java.security.MessageDigest

plugins {
    id 'com.android.application'
}

def gitCommitId = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def gitCommitCount = Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())

def versionNameMajor = 24
def versionNameMinor = 1
def versionNamePatch = 2
def versionNameShort = "v${versionNameMajor}.${versionNameMinor}.${versionNamePatch}"
def versionName = "${versionNameShort}.r${gitCommitCount}.${gitCommitId}"
def versionCode = gitCommitCount

def apiVersion = rootProject.ext.riruApiVersion
def minApiVersion = rootProject.ext.riruMinApiVersion
def moduleProp = [
        id         : "riru-core",
        name       : "Riru",
        version    : "$versionName",
        versionCode: "$versionCode",
        author     : "Rikka",
        description: "Inject into zygote and run codes from \"Riru\" modules in apps or the system server.",
        riruApi    : "$apiVersion",
        riruMinApi : "$minApiVersion"
]

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        externalNativeBuild {
            cmake {
                arguments "-DRIRU_VERSION_NAME:STRING=$versionNameShort",
                        "-DRIRU_VERSION_CODE:STRING=$versionCode",
                        "-DRIRU_API_VERSION=$apiVersion",
                        "-DRIRU_MIN_API_VERSION=$minApiVersion"
            }
        }
        multiDexEnabled false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    lintOptions.checkReleaseBuilds false
    dependenciesInfo.includeInApk false
}

repositories {
    maven { url 'https://dl.bintray.com/rikkaw/Libraries' }
}

dependencies {
    implementation 'dev.rikka.ndk.thirdparty:xhook:1.2.0'
    implementation 'rikka.ndk.thirdparty:flatbuffers:1.12.0'

    implementation 'androidx.annotation:annotation:1.1.0'
    compileOnly project(':stub')
}

def outDir = file("$rootDir/out")
def magiskDir = file("$outDir/magisk_module")

static def sha256sum(file) {
    def md = MessageDigest.getInstance("SHA-256")
    file.eachByte 4096, { bytes, size ->
        md.update(bytes, 0, size);
    }
    return md.digest().encodeHex()
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        def task = variant.assembleProvider.get()
        task.doLast {
            // clear
            delete { delete magiskDir }

            // copy from template
            copy {
                from "$rootDir/template/magisk_module"
                into magiskDir.path
                exclude 'customize.sh', 'util_functions.sh'
            }
            copy {
                from file("$rootDir/template/magisk_module/customize.sh"), file("$rootDir/template/magisk_module/util_functions.sh")
                into magiskDir.path
                filter { line ->
                    line.replaceAll('%%%RIRU_API%%%', apiVersion.toString())
                            .replaceAll('%%%RIRU_VERSION_CODE%%%', versionCode.toString())
                            .replaceAll('%%%RIRU_VERSION_NAME%%%', versionName)
                }
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }

            // copy .git files manually since gradle exclude it by default
            Files.copy(file("$rootDir/template/magisk_module/.gitattributes").toPath(), file("${magiskDir.path}/.gitattributes").toPath())

            // generate module.prop
            def modulePropText = ""
            moduleProp.each { k, v -> modulePropText += "$k=$v\n" }
            modulePropText = modulePropText.trim()
            file("$magiskDir/module.prop").text = modulePropText

            // copy libs
            def nativeOutDir = file("build/intermediates/cmake/$variant.name/obj")
            copy {
                from "$nativeOutDir"
                into "$magiskDir/lib"
                exclude "**/*.txt"
            }

            // copy dex
            copy {
                from zipTree(file(outputFile)).matching { include 'classes.dex' }.singleFile
                into magiskDir
            }

            // generate sha1sum
            fileTree("$magiskDir").matching {
                exclude "README.md", "META-INF"
            }.visit { f ->
                if (f.directory) return
                file(f.file.path + ".sha256sum").text = sha256sum(f.file)
            }
        }

        if (variant.buildType.name == "debug") {
            task.finalizedBy zipMagiskMoudleDebug
        } else {
            task.finalizedBy zipMagiskMoudleRelease
        }
    }
}

task zipMagiskMoudleRelease(type: Zip) {
    from magiskDir
    archiveName "riru-${versionNameShort}-release.zip"
    destinationDir outDir
}

task zipMagiskMoudleDebug(type: Zip) {
    from magiskDir
    archiveName "riru-${versionNameShort}-debug.zip"
    destinationDir outDir
}
